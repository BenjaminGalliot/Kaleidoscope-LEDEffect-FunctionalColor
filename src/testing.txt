FunctionalColors Test Scenarios
-------------------------------

remaining tasks:
	- generate several themes
		- monochrome with brightness variations 
			- can I do this with a user-specified color?
		- rainbow/pride theme
		- red/white
		- pastel
		- desaturated
		- single color
	- enum themes for user-friendliness

	- document all the ways you can use FunctionalColors
	- create example ino
	- clean up codebase

	- test everything (see below)

	- test memory usage
Stock firmware:
Sketch uses 18888 bytes (65%) of program storage space.
Global variables use 1932 bytes (75%) of dynamic memory, leaving 628 bytes for local variables.

Include FunctionalColors and create one default instance:
Sketch uses 23092 bytes (80%) of program storage space.
Global variables use 1957 bytes (76%) of dynamic memory, leaving 603 bytes

Uses 4204 bytes for one instance.

Two instances:
23114 bytes... only 22 more

Using it takes 8 more bytes



- Simple as possible use of FunctionalColors
	- declare class instance with no parameters and use it
		- Should have a reasonably attractive default color layout that makes keys distinguishable

- User wants to have a very simple base layout with a few keys highlighted.
	- Use a monochrome theme and either subclass it with the relevant keys highlighted
	- or optionally/additionally use the macros to change the thing to accent.

- Wants a variety of themes to cycle through

- Test that all the macros work properly

- Instantiate using macros for custom exceptions

- instantiate using custom theme made from subclass



Questions for noseglasses:

Can my macros that control brightness be made a little smarter so they only control the active instance?
I could probably do something to update a static variable with a pointer to the last instance updated and then use a static method to update that. Am I on the right track?

Are there any terrible inefficiencies in what I've got so far?

I'm now using both a colorMap struct with groupColorLookup and an "override" function, optionally generated by the macros, to inform the color lookup function.

In the groupColorLookup function I have cases where there are overlapping groups of keys - for instance shift keys are contained within modifier keys. I thus needed a way to specify in the colorMap struct that a color was to not be used so that it would fall back to its other container (the parent, if you will). I have done this by defining a color called nocolor (it is close to black). Perhaps there is a better way? I couldn't figure out how to use the bool &skip approach that worked in other scenarios.

